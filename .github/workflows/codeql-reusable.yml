name: 'CodeQL Analysis - Reusable Workflow'

# This is a reusable workflow that performs CodeQL analysis on Java code.
# It accepts query pack suggestions as input parameters, allowing calling
# workflows to specify additional security queries to run beyond the defaults.
#
# Key Features:
# - Configurable build modes: "none" (default), "autobuild", or "manual"
# - Custom query pack support
# - Flexible build configuration
# - Debug logging options

on:
  workflow_call:
    inputs:
      # Language to analyze (default: java)
      language:
        description: 'Programming language to analyze'
        required: false
        type: string
        default: 'java'
      
      # Query packs to use in addition to the default security queries
      query-packs:
        description: 'Comma-separated list of CodeQL query packs to use (e.g., "codeql/java-queries:cwe-079,codeql/java-queries:cwe-089")'
        required: false
        type: string
        default: ''
      
      # Query suite to use (options: default, security-extended, security-and-quality)
      query-suite:
        description: 'CodeQL query suite to use'
        required: false
        type: string
        default: 'security-extended'
      
      # Build mode configuration
      build-mode:
        description: 'CodeQL build mode: "none" (no build needed - fastest, recommended for Java/C#), "autobuild" (automatic detection), or "manual" (requires build-command)'
        required: false
        type: string
        default: 'none'
      
      # Build command (only used when build-mode is "manual")
      build-command:
        description: 'Custom build command (only used when build-mode is "manual")'
        required: false
        type: string
        default: ''
      
      # Java version to use
      java-version:
        description: 'Java version to use for build'
        required: false
        type: string
        default: '11'
      
      # Debug logging toggle
      debug-logging:
        description: 'Enable verbose debug logging for troubleshooting'
        required: false
        type: boolean
        default: false

jobs:
  codeql-analysis:
    name: 'CodeQL Analysis'
    runs-on: ubuntu-latest
    
    # Required permissions for CodeQL analysis
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      # Step 1: Checkout the repository code
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          # Fetch full history for better analysis
          fetch-depth: 0

      # Step 2: Set up Java environment
      - name: 'Set up Java'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'
          cache: 'maven'

      # Step 2.5 : Debugging
      #- name: Debugging
      #  run: |
      #    ls -al /opt/hostedtoolcache/CodeQL/2.23.1/x64/codeql/qlpacks/codeql/java-queries/1.8.0

      # Step 3: Initialize CodeQL with specified configuration
      - name: 'Initialize CodeQL'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ inputs.language }}
          # Use the specified query suite
          # I AM COMMENTING THIS OUT TO MAKE SURE IT ONLY USES MY PACK. THIS WILL BREAK OTHER THINGS THAT USE THIS PARAM
          # ULTIMATELY I SHOULD UPDATE MY CODE TO HANDLE THE SCENARIO
          # queries: ${{ inputs.query-suite }}
          # Add query packs if specified
          packs: ${{ inputs.query-packs }}
          # Set build mode based on input parameter
          build-mode: ${{ inputs.build-mode }}
        env:
          # Increase memory for CodeQL analysis
          CODEQL_ACTION_EXTRA_OPTIONS: '{"database": {"interpret-results": {"max-paths": 4}}}'

      # Step 4: Build the application (only for manual build mode)
      - name: 'Build application'
        if: inputs.build-mode == 'manual'
        run: |
          if [ -n "${{ inputs.build-command }}" ]; then
            echo "Using custom build command: ${{ inputs.build-command }}"
            ${{ inputs.build-command }}
          else
            echo "Manual build mode selected but no build command provided, attempting auto-detection"
            if [ -f "pom.xml" ]; then
              echo "Detected Maven project - using default Maven build"
              mvn clean compile -DskipTests
            elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
              echo "Detected Gradle project - using default Gradle build"
              ./gradlew build -x test
            else
              echo "No recognized build file found - cannot build in manual mode"
              exit 1
            fi
          fi

      # Step 4b: Build note for other build modes
      - name: 'Build mode information'
        if: inputs.build-mode != 'manual'
        run: |
          if [ "${{ inputs.build-mode }}" == "none" ]; then
            echo "Using build mode 'none' - CodeQL will analyze without building the project"
            echo "This is recommended for compiled languages like Java and C# when source code analysis is sufficient"
          elif [ "${{ inputs.build-mode }}" == "autobuild" ]; then
            echo "Using build mode 'autobuild' - CodeQL will automatically detect and build the project"
          fi

      # Step 5: Perform CodeQL Analysis
      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v3
        with:
          # Upload results even if there are errors
          upload: true
          # Set analysis category for tracking
          category: 'java-security-analysis'
        env:
          # Enable verbose logging for troubleshooting (configurable)
          CODEQL_ACTION_DEBUG: ${{ inputs.debug-logging }}

      # Step 6: Upload analysis results as artifacts (optional)
      - name: 'Upload CodeQL results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codeql-results-${{ inputs.language }}
          path: |
            ${{ runner.temp }}/codeql_databases/
            !${{ runner.temp }}/codeql_databases/**/*.zip
          retention-days: 30
